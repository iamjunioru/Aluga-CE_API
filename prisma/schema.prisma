// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
}

// Create the user table
model User {
  id       String @id @default(uuid()) @map("_id")
  email     String @unique
  name      String
  password  String
  phone_number String
  has_property Boolean @default(false)
  property  Property[]
  comment   Reviews[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Create the comment table
model Reviews {
  id       String @id @default(uuid()) @map("_id")
  rating   Int
  comment   String
  user     User   @relation(fields: [user_Id], references: [id], onDelete: Cascade)
  user_Id  String
  property Property @relation(fields: [property_Id], references: [id], onDelete: Cascade)
  property_Id String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Create the property table
model Property {
  id      String @id @default(uuid()) @map("_id")
  inscription_number String @unique
  type      String
  description  String
  rent_price   String
  cep      String
  neighborhood String
  street_name  String
  street_number String
  total_occupancy Int
  total_bedrooms  Int
  total_bathrooms Int
  has_wifi     Boolean @default(false)
  has_tv     Boolean @default(false)
  has_air_conditioning Boolean @default(false)
  has_washing_machine Boolean @default(false)
  has_kitchen    Boolean @default(false)
  has_suite    Boolean @default(false)
  has_parking_space  Boolean @default(false)
  has_pool     Boolean @default(false)
  has_beach_view   Boolean @default(false)
  Comments     Reviews[]
  Images     Image[]
  user      User   @relation(fields: [user_Id], references: [id])
  user_Id     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Create the image table
model Image {
  id       String @id @default(uuid()) @map("_id")
  path     String
  property Property @relation(fields: [property_Id], references: [id], onDelete: Cascade)
  property_Id String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
